import Head from 'next/head'
import Header from "@/components/layout/Header";
import Candy from "@/components/candy/Candy";
import React, {useEffect, useState} from "react";
import Player from "@/models/Player";
import {CandyType} from "@/models/Candy";
import CandyList from "@/components/candy/CandyList";
import PlayerStatus from "@/components/PlayerStatus";
import {Location as City} from "@/models/City";
import LocationList from "@/components/location/LocationList";
import Storage from "@/components/Storage";
import Shark from "@/models/LoanShark";
import SelectElement from "@/components/SelectElement";

interface ICandyTypes {
  [key: string]: string;
}

export default function Home() {
  const candyTypes =
      [CandyType.MMS,
        CandyType.REESES,
        CandyType.KIT_KAT,
        CandyType.PEANUT_MMS,
        CandyType.BUTTERFINGER,
        CandyType.SNICKERS,
        CandyType.TWIX,
        CandyType.MILKY_WAY,
        CandyType.HERSHEYS,
        CandyType.MARS];

  const locations =
      [City.CHICAGO,
        City.DETROIT,
        City.LAS_VEGAS,
        City.LOS_ANGELES,
        City.MIAMI,
        City.BRONX,
        City.SAN_DIEGO,
        City.WASHINGTON_DC]

  const [player, setPlayer] = useState<Player | null>(null);
  const [buyInputs, setBuyInputs] = useState<ICandyTypes>({});
  const [sellInputs, setSellInputs] = useState<ICandyTypes>({});
  const [selectValue, setSelectValue] = useState<string>(CandyType.MARS.name);

  useEffect(() => {
    setPlayer(new Player());
  }, []);

  const handleBuyInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {
    setBuyInputs(prevState => ({
      ...prevState,
      [e.target.name]: e.target.value
    }));
  }

  const handleSellInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {
    setSellInputs(prevState => ({
      ...prevState,
      [e.target.name]: e.target.value
    }));
  }

  const handleCandySelectChange = (e: React.ChangeEvent<HTMLSelectElement>): void => {
    setSelectValue(e.target.value);
  };

  const onBuySubmit = (e: React.FormEvent<HTMLFormElement>): void => {
    e.preventDefault();
    const {name} = e.currentTarget;
    const candyType = candyTypes.find(candyType => candyType.name === name);
    const quantity = buyInputs[name] ? parseInt(buyInputs[name]) : 0;

    // @ts-ignore
    player.buy(candyType, quantity, player.city.getCandyPrice(candyType));
    setPlayer(new Player(player));
  };

  const onSellSubmit = (e: React.FormEvent<HTMLFormElement>): void => {
    e.preventDefault();
    const {name} = e.currentTarget;
    const candyType = candyTypes.find(candyType => candyType.name === name);
    const quantity = sellInputs[name] ? parseInt(sellInputs[name]) : 0;

    // @ts-ignore
    player.sell(candyType, quantity, player.city.getCandyPrice(candyType));
    setPlayer(new Player(player));
  };

  const handleLocationChange = (e: React.MouseEvent<HTMLButtonElement>): void => {
    const location = locations.find(location => location.name === e.currentTarget.name);

    // @ts-ignore
    player.travelTo(location, parseInt(e.currentTarget.value));
    setPlayer(new Player(player));
  };

  const handleBankTransaction = (e: React.MouseEvent<HTMLButtonElement>): void => {
    if (e.currentTarget.name.toLowerCase() === "deposit") {
      // @ts-ignore
      player.bank.deposit(player, parseInt(e.currentTarget.value));
    }

    if (e.currentTarget.name.toLowerCase() === "withdraw") {
      // @ts-ignore
      player.bank.withdraw(player, parseInt(e.currentTarget.value));
    }

    setPlayer(new Player(player));
  };

  const handleLoanSharkTransaction = (e: React.MouseEvent<HTMLButtonElement>): void => {
    const shark = new Shark();

    if (e.currentTarget.name.toLowerCase() === "get loan") {
      // @ts-ignore
      shark.getLoan(player, parseInt(e.currentTarget.value));
    }

    if (e.currentTarget.name.toLowerCase() === "pay debt") {
      // @ts-ignore
      shark.payOffLoan(player, parseInt(e.currentTarget.value));
    }

    setPlayer(new Player(player));
  };

  const handleStashTransaction = (e: React.MouseEvent<HTMLButtonElement>): void => {
    const candyType = candyTypes.find(candyType => candyType.name === selectValue)

    if (e.currentTarget.name.toLowerCase() === "deposit") {
      // @ts-ignore
      player.stash.deposit(player, candyType, parseInt(e.currentTarget.value));
    }

    if (e.currentTarget.name.toLowerCase() === "withdraw") {
      // @ts-ignore
      player.stash.withdraw(player, candyType, parseInt(e.currentTarget.value));
    }

    setPlayer(new Player(player));
  };

  return (
      <>
        <Head>
          <title>Candy Lord</title>
          <meta name="description" content="Generated by create next app"/>
          <meta name="viewport" content="width=device-width, initial-scale=1"/>
          <link rel="icon" href="/favicon.ico"/>
        </Head>
        <Header name={"Candy Lord"}/>
        <main>
          <div className={"container mb-5"}>
            <div className={"row"}>
              {player &&
                  <>
                    <div
                        className={"col-12 col-sm-6 col-md-4 col-lg-4 p-0 border border-end-0 border-5"}>
                      <div className={"border-bottom text-center fw-bold"}>Drugs
                        on
                        Hand
                      </div>
                      <CandyList candyTypes={candyTypes}
                                 player={player}
                                 handleInputChange={handleSellInputChange}
                                 onSubmit={onSellSubmit}
                                 buttonName={"Sell"}
                      />
                    </div>


                    <div
                        className={"col-12 col-sm-6 col-md-4 col-lg-4 p-0 border border-5"}>
                      <div
                          className={"border-bottom text-center fw-bold"}>Street
                        Prices
                      </div>
                      <CandyList candyTypes={candyTypes}
                                 city={player.city}
                                 handleInputChange={handleBuyInputChange}
                                 onSubmit={onBuySubmit}
                                 buttonName={"Buy"}
                      />
                    </div>


                    <div
                        className={"col-12 col-sm-12 col-md-4 col-lg-4 border border-5"}>
                      <div className={"row"}>
                        <div className={"col-12 border-bottom"}>
                          <div
                              className={"border-bottom text-center fw-bold"}>Stash
                          </div>
                          <ul className={"list-group"}>
                            {player.stash.candies.length > 0 ?
                                player.stash.candies.map((candy, index) => (
                                    <li key={index}
                                        className={"list-group-item d-flex flex-row justify-content-between border-0"}>
                                      <Candy name={candy.name}
                                             quantity={candy.quantity}/>
                                    </li>
                                )) :
                                <li className={"list-group-item d-flex justify-content-center align-items-center p-0 border-0 fw-semibold"}>Empty</li>}
                          </ul>
                        </div>


                        <div className={"col-12 border-bottom"}>
                          <div className={"row"}>
                            <PlayerStatus player={player}/>
                          </div>
                        </div>


                        <div className={"col-12 border-bottom"}>
                          <LocationList
                              handleLocationChange={handleLocationChange}
                              locations={locations}
                              player={player}
                          />
                        </div>


                        <div className={"col-12 border-bottom px-4"}>
                          <Storage player={player}
                                   handleTransaction={handleBankTransaction}
                                   collapseButtonName={"Bank"}
                                   collapseId={"bank"}
                                   firstButtonName={"Deposit"}
                                   secondButtonName={"Withdraw"}
                          />
                        </div>


                        <div className={"col-12 border-bottom px-4"}>
                          <Storage player={player}
                                   handleTransaction={handleLoanSharkTransaction}
                                   collapseButtonName={"Loan Shark"}
                                   collapseId={"loanShark"}
                                   firstButtonName={"Get Loan"}
                                   secondButtonName={"Pay Debt"}
                          />
                        </div>


                        <div className={"col-12 border-bottom px-4"}>
                          <Storage player={player}
                                   handleTransaction={handleStashTransaction}
                                   collapseButtonName={"Stash"}
                                   collapseId={"stash"}
                                   firstButtonName={"Deposit"}
                                   secondButtonName={"Withdraw"}
                                   selectElement={<SelectElement
                                       list={candyTypes}
                                       value={selectValue}
                                       onChange={handleCandySelectChange}/>}
                          />
                        </div>
                      </div>
                    </div>
                  </>}
            </div>
          </div>
        </main>
      </>
  );
}
